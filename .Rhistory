install()
devtools::install()
library(devtools)
document()
install()
library(devtools)
document(); install()
library(devtools)
document()
install()
document()
library(devtools)
document()
install()
ai <- c(5, 0)
ci <- c(0, 0)
n1i <- c(10, 10)
n2i <- c(10, 10)
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
test_2by2_tables <- function(ai, n1i, ci, n2i) {
## test: if x and n are both numetic vectors
if ((!is.numeric(ai))|(!is.numeric(n1i))|(!is.numeric(ci))|(!is.numeric(n2i))) {
stop("The arguments ai, n1i, ci, n2i should be numeric vectors.")
}
## test: if all entries of x is nonnegative
if (any(c(ai, n1i, ci, n2i) < 0)) {
stop("Elements in X have to be nonnegative.")
}
## test: if ai, n1i, ci, n2i have the same length
if ((length(ai) != length(n1i)) | length(ai) != length(ci) |
length(ai) != length(n2i)) {
stop("The vectors ai, n1i, ci, n2i should have the same length.")
}
}
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
## read numbers from the table
bi <- n1i - ai
di <- n2i - ci
## table totals
ni <- n1i + n2i
nn <- sum(ni)
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
if (any(any0)) {
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
n1i <- ai + bi
n2i <- ci + di
ni <- n1i + n2i
nn <- sum(nn)
}
correction_factor <- 0.01
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
if (any(any0)) {
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
n1i <- ai + bi
n2i <- ci + di
ni <- n1i + n2i
nn <- sum(nn)
}
## objective function of firth logistic regression -- penalized negative log likelihood
objfunc <- function(param) {
alpha <- param[1:K]
psi <- param[K+1]
negloglikhd <- -sum(ai * (alpha + psi) - n1i * log(1 + exp(alpha + psi)) +
ci * alpha - n2i * log(1 + exp(alpha)))
## Fisher information
FI <- matrix(0, nrow = K + 1, ncol = K + 1)
## quantities for calculating the Fisher information
tt1 <- n1i * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
tt0 <- n2i * exp(alpha) / (1 + exp(alpha + psi)) ^ 2
FI[1:K, K + 1] <- FI[K + 1, 1:K] <- tt1
diag(FI)[1:K] <- tt1 + tt0
FI[K + 1, K + 1] <- sum(tt1)
negloglikhd - 0.5 * log(det(FI))
}
dat_reshape <- rbind(data.frame(rr = ai, nr = bi, xx = 1, t = 1:K),
data.frame(rr = ci, nr = di, xx = 0, t = 1:K))
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
mle <- logit_mod$coefficients
## point estimates of Firth regression
firth_est <- as.numeric(optim(mle, objfunc)$par)
EST <- firth_est[K + 1]
## constants that help with the calculation
gamma <- ni / nn
delta <- n1i / ni
p1 <- ai / n1i
p0 <- ci / n2i
alpha <- firth_est[1:K]
psi <- firth_est[K + 1]
alpha
psi
EST
mle
uu <- - gamma * delta * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
vv <- - gamma * (1 - delta) * exp(alpha) / (1 + exp(alpha)) ^ 2
ss <- gamma * delta * p1 * (1 - p1)
tt <- gamma * (1 - delta) * p0 * (1 - p0)
## sandwich estimator
JJ <- UU <- matrix(0, nrow = K + 1, ncol = K + 1)
JJ[K + 1, 1:K] <- JJ[1:K, K + 1] <- uu
diag(JJ)[1:K] <- uu + vv
JJ[K + 1, K + 1] <- sum(uu)
UU[K + 1, 1:K] <- UU[1:K, K + 1] <- ss
diag(UU)[1:K] <- ss + tt
UU[K + 1, K + 1] <- sum(ss)
## avoid singular matrix
svd_JJ <- svd(JJ)
if (any(svd_JJ$d <= 1e-8)) {
svd_JJ$d[svd_JJ$d <= 1e-8] <- 1e-8
JJ <- svd_JJ$u %*% diag(svd_JJ$d) %*% t(svd_JJ$v)
}
## Fisher Information matrix
vcov_hom <- solve(-JJ)
## sandwich covariance matrix
vcov_hw <- solve(JJ) %*% UU %*% solve(JJ)
## variance and se of the common log or under homo- or heterogeneity
VAR_HOM <- vcov_hom[K + 1, K + 1] / nn
VAR <- vcov_hw[K + 1, K + 1] / nn
SE_HOM <- sqrt(VAR_HOM)
SE <- sqrt(VAR)
SE_HOM
SE
VAR_HOM
VAR
library(devtools)
document()
install()
ai <- c(0, 0)
ci <- c(0, 0)
ni <- c(10, 10)
test_2by2_tables(ai, n1i, ci, n2i)
test_2by2_tables <- function(ai, n1i, ci, n2i) {
## test: if x and n are both numetic vectors
if ((!is.numeric(ai))|(!is.numeric(n1i))|(!is.numeric(ci))|(!is.numeric(n2i))) {
stop("The arguments ai, n1i, ci, n2i should be numeric vectors.")
}
## test: if all entries of x is nonnegative
if (any(c(ai, n1i, ci, n2i) < 0)) {
stop("Elements in X have to be nonnegative.")
}
## test: if ai, n1i, ci, n2i have the same length
if ((length(ai) != length(n1i)) | length(ai) != length(ci) |
length(ai) != length(n2i)) {
stop("The vectors ai, n1i, ci, n2i should have the same length.")
}
}
test_2by2_tables(ai, n1i, ci, n2i)
n1i <- c(10, 10)
test_2by2_tables(ai, n1i, ci, n2i)
n2i <- c(10, 10)
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
## read numbers from the table
bi <- n1i - ai
di <- n2i - ci
## table totals
ni <- n1i + n2i
nn <- sum(ni)
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
if (any(any0)) {
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
n1i <- ai + bi
n2i <- ci + di
ni <- n1i + n2i
nn <- sum(nn)
}
correction_factor <- 0.01
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
if (any(any0)) {
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
n1i <- ai + bi
n2i <- ci + di
ni <- n1i + n2i
nn <- sum(nn)
}
## objective function of firth logistic regression -- penalized negative log likelihood
objfunc <- function(param) {
alpha <- param[1:K]
psi <- param[K+1]
negloglikhd <- -sum(ai * (alpha + psi) - n1i * log(1 + exp(alpha + psi)) +
ci * alpha - n2i * log(1 + exp(alpha)))
## Fisher information
FI <- matrix(0, nrow = K + 1, ncol = K + 1)
## quantities for calculating the Fisher information
tt1 <- n1i * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
tt0 <- n2i * exp(alpha) / (1 + exp(alpha + psi)) ^ 2
FI[1:K, K + 1] <- FI[K + 1, 1:K] <- tt1
diag(FI)[1:K] <- tt1 + tt0
FI[K + 1, K + 1] <- sum(tt1)
negloglikhd - 0.5 * log(det(FI))
}
dat_reshape <- rbind(data.frame(rr = ai, nr = bi, xx = 1, t = 1:K),
data.frame(rr = ci, nr = di, xx = 0, t = 1:K))
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
mle <- logit_mod$coefficients
## point estimates of Firth regression
firth_est <- as.numeric(optim(mle, objfunc)$par)
EST <- firth_est[K + 1]
## constants that help with the calculation
gamma <- ni / nn
delta <- n1i / ni
p1 <- ai / n1i
p0 <- ci / n2i
alpha <- firth_est[1:K]
psi <- firth_est[K + 1]
uu <- - gamma * delta * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
vv <- - gamma * (1 - delta) * exp(alpha) / (1 + exp(alpha)) ^ 2
ss <- gamma * delta * p1 * (1 - p1)
tt <- gamma * (1 - delta) * p0 * (1 - p0)
## sandwich estimator
JJ <- UU <- matrix(0, nrow = K + 1, ncol = K + 1)
uu
vv
ss
tt
JJ
JJ[K + 1, 1:K] <- JJ[1:K, K + 1] <- uu
diag(JJ)[1:K] <- uu + vv
JJ[K + 1, K + 1] <- sum(uu)
UU[K + 1, 1:K] <- UU[1:K, K + 1] <- ss
diag(UU)[1:K] <- ss + tt
UU[K + 1, K + 1] <- sum(ss)
JJ
## avoid singular matrix
svd_JJ <- svd(-JJ)
if (any(svd_JJ$d <= 1e-8)) {
svd_JJ$d[svd_JJ$d <= 1e-8] <- 1e-8
JJ <- svd_JJ$u %*% diag(svd_JJ$d) %*% t(svd_JJ$v)
}
JJ
JJ
-JJ
JJ[K + 1, 1:K] <- JJ[1:K, K + 1] <- uu
diag(JJ)[1:K] <- uu + vv
JJ[K + 1, K + 1] <- sum(uu)
JJ
UU[K + 1, 1:K] <- UU[1:K, K + 1] <- ss
diag(UU)[1:K] <- ss + tt
UU[K + 1, K + 1] <- sum(ss)
## avoid singular matrix
svd_JJ <- svd(-JJ)
svd_JJ
JJ <- -JJ
## avoid singular matrix
svd_JJ <- svd(-JJ)
## avoid singular matrix
svd_JJ <- svd(JJ)
if (any(svd_JJ$d <= 1e-8)) {
svd_JJ$d[svd_JJ$d <= 1e-8] <- 1e-8
JJ <- svd_JJ$u %*% diag(svd_JJ$d) %*% t(svd_JJ$v)
}
## Fisher Information matrix
vcov_hom <- solve(JJ)
JJ
vcov_hom(JJ)
solve(JJ)
## sandwich covariance matrix
vcov_hw <- solve(JJ) %*% UU %*% solve(JJ)
vcov_hw
## variance and se of the common log or under homo- or heterogeneity
VAR_HOM <- vcov_hom[K + 1, K + 1] / nn
VAR <- vcov_hw[K + 1, K + 1] / nn
test_2by2_tables <- function(ai, n1i, ci, n2i) {
## test: if x and n are both numetic vectors
if ((!is.numeric(ai))|(!is.numeric(n1i))|(!is.numeric(ci))|(!is.numeric(n2i))) {
stop("The arguments ai, n1i, ci, n2i should be numeric vectors.")
}
## test: if all entries of x is nonnegative
if (any(c(ai, n1i, ci, n2i) < 0)) {
stop("Elements in X have to be nonnegative.")
}
## test: if ai, n1i, ci, n2i have the same length
if ((length(ai) != length(n1i)) | length(ai) != length(ci) |
length(ai) != length(n2i)) {
stop("The vectors ai, n1i, ci, n2i should have the same length.")
}
}
ai <- c(0, 0)
ci <- c(10, 10)
n1i <- c(10, 10)
n2i <- c(10, 10)
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
## read numbers from the table
bi <- n1i - ai
di <- n2i - ci
## table totals
ni <- n1i + n2i
nn <- sum(ni)
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
if (any(any0)) {
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
n1i <- ai + bi
n2i <- ci + di
ni <- n1i + n2i
nn <- sum(nn)
}
## objective function of firth logistic regression -- penalized negative log likelihood
objfunc <- function(param) {
alpha <- param[1:K]
psi <- param[K+1]
negloglikhd <- -sum(ai * (alpha + psi) - n1i * log(1 + exp(alpha + psi)) +
ci * alpha - n2i * log(1 + exp(alpha)))
## Fisher information
FI <- matrix(0, nrow = K + 1, ncol = K + 1)
## quantities for calculating the Fisher information
tt1 <- n1i * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
tt0 <- n2i * exp(alpha) / (1 + exp(alpha + psi)) ^ 2
FI[1:K, K + 1] <- FI[K + 1, 1:K] <- tt1
diag(FI)[1:K] <- tt1 + tt0
FI[K + 1, K + 1] <- sum(tt1)
negloglikhd - 0.5 * log(det(FI))
}
dat_reshape <- rbind(data.frame(rr = ai, nr = bi, xx = 1, t = 1:K),
data.frame(rr = ci, nr = di, xx = 0, t = 1:K))
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
mle <- logit_mod$coefficients
## point estimates of Firth regression
firth_est <- as.numeric(optim(mle, objfunc)$par)
mle
firth_est
EST <- firth_est[K + 1]
## constants that help with the calculation
gamma <- ni / nn
delta <- n1i / ni
p1 <- ai / n1i
p0 <- ci / n2i
alpha <- firth_est[1:K]
psi <- firth_est[K + 1]
uu <- - gamma * delta * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
vv <- - gamma * (1 - delta) * exp(alpha) / (1 + exp(alpha)) ^ 2
ss <- gamma * delta * p1 * (1 - p1)
tt <- gamma * (1 - delta) * p0 * (1 - p0)
uu <- - gamma * delta * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
vv <- - gamma * (1 - delta) * exp(alpha) / (1 + exp(alpha)) ^ 2
ss <- gamma * delta * p1 * (1 - p1)
tt <- gamma * (1 - delta) * p0 * (1 - p0)
## sandwich estimator
JJ <- UU <- matrix(0, nrow = K + 1, ncol = K + 1)
JJ[K + 1, 1:K] <- JJ[1:K, K + 1] <- uu
diag(JJ)[1:K] <- uu + vv
JJ[K + 1, K + 1] <- sum(uu)
JJ <- -JJ
UU[K + 1, 1:K] <- UU[1:K, K + 1] <- ss
diag(UU)[1:K] <- ss + tt
UU[K + 1, K + 1] <- sum(ss)
## avoid singular matrix
svd_JJ <- svd(JJ)
if (any(svd_JJ$d <= 1e-8)) {
svd_JJ$d[svd_JJ$d <= 1e-8] <- 1e-8
JJ <- svd_JJ$u %*% diag(svd_JJ$d) %*% t(svd_JJ$v)
}
## Fisher Information matrix
vcov_hom <- solve(JJ)
vcov_hom
## sandwich covariance matrix
vcov_hw <- solve(JJ) %*% UU %*% solve(JJ)
vcov_hw
alpha <- mle[1:K]
psi <- mle[K + 1]
uu <- - gamma * delta * exp(alpha + psi) / (1 + exp(alpha + psi)) ^ 2
vv <- - gamma * (1 - delta) * exp(alpha) / (1 + exp(alpha)) ^ 2
ss <- gamma * delta * p1 * (1 - p1)
tt <- gamma * (1 - delta) * p0 * (1 - p0)
## sandwich estimator
JJ <- UU <- matrix(0, nrow = K + 1, ncol = K + 1)
JJ[K + 1, 1:K] <- JJ[1:K, K + 1] <- uu
diag(JJ)[1:K] <- uu + vv
JJ[K + 1, K + 1] <- sum(uu)
JJ <- -JJ
UU[K + 1, 1:K] <- UU[1:K, K + 1] <- ss
diag(UU)[1:K] <- ss + tt
UU[K + 1, K + 1] <- sum(ss)
## avoid singular matrix
svd_JJ <- svd(JJ)
if (any(svd_JJ$d <= 1e-8)) {
svd_JJ$d[svd_JJ$d <= 1e-8] <- 1e-8
JJ <- svd_JJ$u %*% diag(svd_JJ$d) %*% t(svd_JJ$v)
}
## Fisher Information matrix
vcov_hom <- solve(JJ)
## sandwich covariance matrix
vcov_hw <- solve(JJ) %*% UU %*% solve(JJ)
vcov_hom
vcov_hw
JJ
U
UU
## avoid singular matrix
svd_JJ <- svd(JJ)
if (any(svd_JJ$d <= 1e-8)) {
svd_JJ$d[svd_JJ$d <= 1e-8] <- 1e-8
JJ <- svd_JJ$u %*% diag(svd_JJ$d) %*% t(svd_JJ$v)
}
## Fisher Information matrix
vcov_hom <- solve(JJ)
## sandwich covariance matrix
vcov_hw <- solve(JJ) %*% UU %*% solve(JJ)
## variance and se of the common log or under homo- or heterogeneity
VAR_HOM <- vcov_hom[K + 1, K + 1] / nn
VAR <- vcov_hw[K + 1, K + 1] / nn
SE_HOM <- sqrt(VAR_HOM)
SE <- sqrt(VAR)
CI_HOM<- wald_ci(EST, SE_HOM, alternative = alternative, conf.level = conf.level)
CI <- wald_ci(EST, SE, alternative = alternative, conf.level = conf.level)
library(devtools)
document()
install()
