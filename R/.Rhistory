test_2by2_tables <- function(ai, n1i, ci, n2i) {
## test: if x and n are both numetic vectors
if ((!is.numeric(ai))|(!is.numeric(n1i))|(!is.numeric(ci))|(!is.numeric(n2i))) {
stop("The arguments ai, n1i, ci, n2i should be numeric vectors.")
}
## test: if all entries of x is nonnegative
if (any(c(ai, n1i, ci, n2i) < 0)) {
stop("Elements in X have to be nonnegative.")
}
## test: if ai, n1i, ci, n2i have the same length
if ((length(ai) != length(n1i)) | length(ai) != length(ci) |
length(ai) != length(n2i)) {
stop("The vectors ai, n1i, ci, n2i should have the same length.")
}
}
ai <- c(40, 40)
ai <- c(3, 27)
n1i <- c(40, 40)
ci <- c(24, 0)
n2i <- c(40, 40)
correction_factor = 0.01
conf.level = 0.95
alternative = "t"
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
## read numbers from the table
bi <- n1i - ai
di <- n2i - ci
## table totals
ni <- n1i + n2i
nn <- sum(ni)
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
## zero-cell correction for tables with zeroes
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
## formulate the data for running logistic regression
dat_reshape <- rbind(data.frame(rr = ai, nr = bi, xx = 1, t = 1:K),
data.frame(rr = ci, nr = di, xx = 0, t = 1:K))
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
summary(logit_mod)
MLE <- logit_mod$coefficients
## compute the asymptotic variance-covariance matrix of beta_hat
aa <- MLE[1:K]
bb <- MLE[K + 1]
aa
bb
EST <- as.numeric(bb)
## make sandwich estimator of variance
## make matrix J.hat as in the document (negtive Fisher Information)
uu <- - n1i * exp(aa + bb) / ((1 + exp(aa + bb)) ^ 2 * nn)
vv <- - n2i * exp(aa) / ((1 + exp(aa)) ^ 2 * nn)
J <- matrix(0, nrow = K + 1, ncol = K + 1)
diag(J) <- c(uu + vv, sum(uu))
J[K + 1, 1:K] <- J[1:K, K + 1] <- uu
J
## make matrix U.hat as in the document
ss <- ai * bi / (n1i * nn)
tt <- ci * di / (n2i * nn)
U <- matrix(0, nrow = K + 1, ncol = K + 1)
diag(U) <- c(ss + tt, sum(ss))
U[K + 1, 1:K] <- U[1:K, K + 1] <- ss
## avoid singular matrix
svd_J <- svd(J)
if (any(svd_J$d <= 1e-8)) {
svd_J$d[svd_J$d <= 1e-8] <- 1e-8
J <- svd_J$u %*% diag(svd_J$d) %*% t(svd_J$v)
}
svd_J
## estimated variance of MLE under heterogeneity: sandwich estimator
Omega_het <- solve(-J) %*% U %*% solve(-J)
## estimated variance of MLE under homogeneity: inverse Fisher Information
Omega_hom <- solve(-J)
## approximate variance of MLE of "common odds ratio" under homogeneity and heterogeneity
VAR_HOM <- Omega_hom[K + 1, K + 1] / nn
SE_HOM <- sqrt(VAR_HOM)
VAR <- Omega_het[K + 1, K + 1] / nn
SE <- sqrt(VAR)
CI_HOM <- wald_ci(EST, SE_HOM, alternative = alternative, conf.level = conf.level)
SE
## construct confidence intervals
wald_ci <- function(EST, SE, alternative = "two.sided",
conf.level = 0.95) {
alternative <- char.expand(alternative, c("two.sided", "less", "greater"))
alpha <- 1 - conf.level
if (alternative == "less") {
CI <- c(EST + qnorm(alpha) * SE, Inf)
} else if (alternative == "greater") {
CI <- c(-Inf, EST + qnorm(conf.level) * SE)
} else if (alternative == "two.sided") {
CI <- EST + qnorm(c(alpha / 2, 1 - alpha / 2)) * SE
} else {
stop("'alternative' must be one of 'two.sided', 'less' or 'greater'")
}
return(CI)
}
ai <- c(3, 37)
ci <- c(24, 0)
n1 <- c(40, 40)
n2 <- c(40, 40)
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
## read numbers from the table
bi <- n1i - ai
di <- n2i - ci
## table totals
ni <- n1i + n2i
nn <- sum(ni)
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
## zero-cell correction for tables with zeroes
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
## formulate the data for running logistic regression
dat_reshape <- rbind(data.frame(rr = ai, nr = bi, xx = 1, t = 1:K),
data.frame(rr = ci, nr = di, xx = 0, t = 1:K))
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
MLE <- logit_mod$coefficients
## compute the asymptotic variance-covariance matrix of beta_hat
aa <- MLE[1:K]
bb <- MLE[K + 1]
EST <- as.numeric(bb)
## make sandwich estimator of variance
## make matrix J.hat as in the document (negtive Fisher Information)
uu <- - n1i * exp(aa + bb) / ((1 + exp(aa + bb)) ^ 2 * nn)
vv <- - n2i * exp(aa) / ((1 + exp(aa)) ^ 2 * nn)
J <- matrix(0, nrow = K + 1, ncol = K + 1)
diag(J) <- c(uu + vv, sum(uu))
J[K + 1, 1:K] <- J[1:K, K + 1] <- uu
## make matrix U.hat as in the document
ss <- ai * bi / (n1i * nn)
tt <- ci * di / (n2i * nn)
U <- matrix(0, nrow = K + 1, ncol = K + 1)
diag(U) <- c(ss + tt, sum(ss))
U[K + 1, 1:K] <- U[1:K, K + 1] <- ss
J
I
U
vv
uu
aa
bb
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
MLE <- logit_mod$coefficients
MLE
MLE <- logit_mod$coefficients
## compute the asymptotic variance-covariance matrix of beta_hat
aa <- MLE[1:K]
bb <- MLE[K + 1]
aa
bb
ai <- c(3, 37)
ci <- c(24, 0)
n1i <- c(40, 40)
n2i <- c(40, 40)
correction_factor <- 0.1
test_2by2_tables(ai, n1i, ci, n2i)
K <- length(ai) ## number of tables
## read numbers from the table
bi <- n1i - ai
di <- n2i - ci
## table totals
ni <- n1i + n2i
nn <- sum(ni)
any0 <- apply(data.frame(ai, bi, ci, di), 1, function(rr) any(rr == 0))
## zero-cell correction for tables with zeroes
for (jj in 1:K) {
if (any0[jj]) {
ai[jj] <- ai[jj] + correction_factor * n1i[jj] / ni[jj]
bi[jj] <- bi[jj] + correction_factor * n1i[jj] / ni[jj]
ci[jj] <- ci[jj] + correction_factor * n2i[jj] / ni[jj]
di[jj] <- di[jj] + correction_factor * n2i[jj] / ni[jj]
}
}
## formulate the data for running logistic regression
dat_reshape <- rbind(data.frame(rr = ai, nr = bi, xx = 1, t = 1:K),
data.frame(rr = ci, nr = di, xx = 0, t = 1:K))
suppressWarnings(
logit_mod <- glm(cbind(rr, nr) ~ 0 + as.factor(t) + xx, data = dat_reshape, family = "binomial")
)
MLE <- logit_mod$coefficients
MLE
## compute the asymptotic variance-covariance matrix of beta_hat
aa <- MLE[1:K]
bb <- MLE[K + 1]
EST <- as.numeric(bb)
## make sandwich estimator of variance
## make matrix J.hat as in the document (negtive Fisher Information)
uu <- - n1i * exp(aa + bb) / ((1 + exp(aa + bb)) ^ 2 * nn)
vv <- - n2i * exp(aa) / ((1 + exp(aa)) ^ 2 * nn)
J <- matrix(0, nrow = K + 1, ncol = K + 1)
diag(J) <- c(uu + vv, sum(uu))
J[K + 1, 1:K] <- J[1:K, K + 1] <- uu
## make matrix U.hat as in the document
ss <- ai * bi / (n1i * nn)
tt <- ci * di / (n2i * nn)
U <- matrix(0, nrow = K + 1, ncol = K + 1)
diag(U) <- c(ss + tt, sum(ss))
U[K + 1, 1:K] <- U[1:K, K + 1] <- ss
## avoid singular matrix
svd_J <- svd(J)
if (any(svd_J$d <= 1e-8)) {
svd_J$d[svd_J$d <= 1e-8] <- 1e-8
J <- svd_J$u %*% diag(svd_J$d) %*% t(svd_J$v)
}
## estimated variance of MLE under heterogeneity: sandwich estimator
Omega_het <- solve(-J) %*% U %*% solve(-J)
## estimated variance of MLE under homogeneity: inverse Fisher Information
Omega_hom <- solve(-J)
## approximate variance of MLE of "common odds ratio" under homogeneity and heterogeneity
VAR_HOM <- Omega_hom[K + 1, K + 1] / nn
SE_HOM <- sqrt(VAR_HOM)
VAR <- Omega_het[K + 1, K + 1] / nn
SE <- sqrt(VAR)
SE
SE_HOM
CI_HOM <- wald_ci(EST, SE_HOM, alternative = alternative, conf.level = conf.level)
CI <- wald_ci(EST, SE, alternative = alternative, conf.level = conf.level)
CI_HOM
CI
list(EST = EST, SE_HOM = SE_HOM,VAR_HOM = VAR_HOM, CI_HOM = CI_HOM,
SE = SE, VAR = VAR, CI = CI)
